'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="HRMS_DB")>  _
Partial Public Class HRMS_DBLinq2DataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertattendance(instance As attendance)
    End Sub
  Partial Private Sub Updateattendance(instance As attendance)
    End Sub
  Partial Private Sub Deleteattendance(instance As attendance)
    End Sub
  Partial Private Sub InsertPeople(instance As People)
    End Sub
  Partial Private Sub UpdatePeople(instance As People)
    End Sub
  Partial Private Sub DeletePeople(instance As People)
    End Sub
  Partial Private Sub Insertdeduction(instance As deduction)
    End Sub
  Partial Private Sub Updatededuction(instance As deduction)
    End Sub
  Partial Private Sub Deletededuction(instance As deduction)
    End Sub
  Partial Private Sub InsertLeave(instance As Leave)
    End Sub
  Partial Private Sub UpdateLeave(instance As Leave)
    End Sub
  Partial Private Sub DeleteLeave(instance As Leave)
    End Sub
  Partial Private Sub Insertmandatory_deduction(instance As mandatory_deduction)
    End Sub
  Partial Private Sub Updatemandatory_deduction(instance As mandatory_deduction)
    End Sub
  Partial Private Sub Deletemandatory_deduction(instance As mandatory_deduction)
    End Sub
  Partial Private Sub Insertnetpay(instance As netpay)
    End Sub
  Partial Private Sub Updatenetpay(instance As netpay)
    End Sub
  Partial Private Sub Deletenetpay(instance As netpay)
    End Sub
  Partial Private Sub Insertovertime(instance As overtime)
    End Sub
  Partial Private Sub Updateovertime(instance As overtime)
    End Sub
  Partial Private Sub Deleteovertime(instance As overtime)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.HRMS.My.MySettings.Default.HRMS_DBConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property attendances() As System.Data.Linq.Table(Of attendance)
		Get
			Return Me.GetTable(Of attendance)
		End Get
	End Property
	
	Public ReadOnly Property Peoples() As System.Data.Linq.Table(Of People)
		Get
			Return Me.GetTable(Of People)
		End Get
	End Property
	
	Public ReadOnly Property deductions() As System.Data.Linq.Table(Of deduction)
		Get
			Return Me.GetTable(Of deduction)
		End Get
	End Property
	
	Public ReadOnly Property Leaves() As System.Data.Linq.Table(Of Leave)
		Get
			Return Me.GetTable(Of Leave)
		End Get
	End Property
	
	Public ReadOnly Property mandatory_deductions() As System.Data.Linq.Table(Of mandatory_deduction)
		Get
			Return Me.GetTable(Of mandatory_deduction)
		End Get
	End Property
	
	Public ReadOnly Property netpays() As System.Data.Linq.Table(Of netpay)
		Get
			Return Me.GetTable(Of netpay)
		End Get
	End Property
	
	Public ReadOnly Property overtimes() As System.Data.Linq.Table(Of overtime)
		Get
			Return Me.GetTable(Of overtime)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.attendance")>  _
Partial Public Class attendance
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _attendance_id As Integer
	
	Private _people_id As String
	
	Private _date As Date
	
	Private _time_in As System.Nullable(Of System.TimeSpan)
	
	Private _time_out As System.Nullable(Of System.TimeSpan)
	
	Private _lunch_out As System.Nullable(Of System.TimeSpan)
	
	Private _lunch_in As System.Nullable(Of System.TimeSpan)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onattendance_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onattendance_idChanged()
    End Sub
    Partial Private Sub Onpeople_idChanging(value As String)
    End Sub
    Partial Private Sub Onpeople_idChanged()
    End Sub
    Partial Private Sub OndateChanging(value As Date)
    End Sub
    Partial Private Sub OndateChanged()
    End Sub
    Partial Private Sub Ontime_inChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub Ontime_inChanged()
    End Sub
    Partial Private Sub Ontime_outChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub Ontime_outChanged()
    End Sub
    Partial Private Sub Onlunch_outChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub Onlunch_outChanged()
    End Sub
    Partial Private Sub Onlunch_inChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub Onlunch_inChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_attendance_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property attendance_id() As Integer
		Get
			Return Me._attendance_id
		End Get
		Set
			If ((Me._attendance_id = value)  _
						= false) Then
				Me.Onattendance_idChanging(value)
				Me.SendPropertyChanging
				Me._attendance_id = value
				Me.SendPropertyChanged("attendance_id")
				Me.Onattendance_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_people_id", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property people_id() As String
		Get
			Return Me._people_id
		End Get
		Set
			If (String.Equals(Me._people_id, value) = false) Then
				Me.Onpeople_idChanging(value)
				Me.SendPropertyChanging
				Me._people_id = value
				Me.SendPropertyChanged("people_id")
				Me.Onpeople_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="date", Storage:="_date", DbType:="Date NOT NULL")>  _
	Public Property [date]() As Date
		Get
			Return Me._date
		End Get
		Set
			If ((Me._date = value)  _
						= false) Then
				Me.OndateChanging(value)
				Me.SendPropertyChanging
				Me._date = value
				Me.SendPropertyChanged("[date]")
				Me.OndateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_time_in", DbType:="Time")>  _
	Public Property time_in() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._time_in
		End Get
		Set
			If (Me._time_in.Equals(value) = false) Then
				Me.Ontime_inChanging(value)
				Me.SendPropertyChanging
				Me._time_in = value
				Me.SendPropertyChanged("time_in")
				Me.Ontime_inChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_time_out", DbType:="Time")>  _
	Public Property time_out() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._time_out
		End Get
		Set
			If (Me._time_out.Equals(value) = false) Then
				Me.Ontime_outChanging(value)
				Me.SendPropertyChanging
				Me._time_out = value
				Me.SendPropertyChanged("time_out")
				Me.Ontime_outChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lunch_out", DbType:="Time")>  _
	Public Property lunch_out() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._lunch_out
		End Get
		Set
			If (Me._lunch_out.Equals(value) = false) Then
				Me.Onlunch_outChanging(value)
				Me.SendPropertyChanging
				Me._lunch_out = value
				Me.SendPropertyChanged("lunch_out")
				Me.Onlunch_outChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lunch_in", DbType:="Time")>  _
	Public Property lunch_in() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._lunch_in
		End Get
		Set
			If (Me._lunch_in.Equals(value) = false) Then
				Me.Onlunch_inChanging(value)
				Me.SendPropertyChanging
				Me._lunch_in = value
				Me.SendPropertyChanged("lunch_in")
				Me.Onlunch_inChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.People")>  _
Partial Public Class People
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _people_id As String
	
	Private _people_index As Integer
	
	Private _people_password As String
	
	Private _people_name As String
	
	Private _people_ic As String
	
	Private _people_DOB As String
	
	Private _people_gender As String
	
	Private _people_phone As String
	
	Private _people_email As String
	
	Private _people_address As String
	
	Private _people_role As String
	
	Private _department_name As String
	
	Private _leave_num As Integer
	
	Private _extra_leave As Integer
	
	Private _hourly_rates As Decimal
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onpeople_idChanging(value As String)
    End Sub
    Partial Private Sub Onpeople_idChanged()
    End Sub
    Partial Private Sub Onpeople_indexChanging(value As Integer)
    End Sub
    Partial Private Sub Onpeople_indexChanged()
    End Sub
    Partial Private Sub Onpeople_passwordChanging(value As String)
    End Sub
    Partial Private Sub Onpeople_passwordChanged()
    End Sub
    Partial Private Sub Onpeople_nameChanging(value As String)
    End Sub
    Partial Private Sub Onpeople_nameChanged()
    End Sub
    Partial Private Sub Onpeople_icChanging(value As String)
    End Sub
    Partial Private Sub Onpeople_icChanged()
    End Sub
    Partial Private Sub Onpeople_DOBChanging(value As String)
    End Sub
    Partial Private Sub Onpeople_DOBChanged()
    End Sub
    Partial Private Sub Onpeople_genderChanging(value As String)
    End Sub
    Partial Private Sub Onpeople_genderChanged()
    End Sub
    Partial Private Sub Onpeople_phoneChanging(value As String)
    End Sub
    Partial Private Sub Onpeople_phoneChanged()
    End Sub
    Partial Private Sub Onpeople_emailChanging(value As String)
    End Sub
    Partial Private Sub Onpeople_emailChanged()
    End Sub
    Partial Private Sub Onpeople_addressChanging(value As String)
    End Sub
    Partial Private Sub Onpeople_addressChanged()
    End Sub
    Partial Private Sub Onpeople_roleChanging(value As String)
    End Sub
    Partial Private Sub Onpeople_roleChanged()
    End Sub
    Partial Private Sub Ondepartment_nameChanging(value As String)
    End Sub
    Partial Private Sub Ondepartment_nameChanged()
    End Sub
    Partial Private Sub Onleave_numChanging(value As Integer)
    End Sub
    Partial Private Sub Onleave_numChanged()
    End Sub
    Partial Private Sub Onextra_leaveChanging(value As Integer)
    End Sub
    Partial Private Sub Onextra_leaveChanged()
    End Sub
    Partial Private Sub Onhourly_ratesChanging(value As Decimal)
    End Sub
    Partial Private Sub Onhourly_ratesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_people_id", DbType:="VarChar(15) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property people_id() As String
		Get
			Return Me._people_id
		End Get
		Set
			If (String.Equals(Me._people_id, value) = false) Then
				Me.Onpeople_idChanging(value)
				Me.SendPropertyChanging
				Me._people_id = value
				Me.SendPropertyChanged("people_id")
				Me.Onpeople_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_people_index", DbType:="Int NOT NULL")>  _
	Public Property people_index() As Integer
		Get
			Return Me._people_index
		End Get
		Set
			If ((Me._people_index = value)  _
						= false) Then
				Me.Onpeople_indexChanging(value)
				Me.SendPropertyChanging
				Me._people_index = value
				Me.SendPropertyChanged("people_index")
				Me.Onpeople_indexChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_people_password", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property people_password() As String
		Get
			Return Me._people_password
		End Get
		Set
			If (String.Equals(Me._people_password, value) = false) Then
				Me.Onpeople_passwordChanging(value)
				Me.SendPropertyChanging
				Me._people_password = value
				Me.SendPropertyChanged("people_password")
				Me.Onpeople_passwordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_people_name", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property people_name() As String
		Get
			Return Me._people_name
		End Get
		Set
			If (String.Equals(Me._people_name, value) = false) Then
				Me.Onpeople_nameChanging(value)
				Me.SendPropertyChanging
				Me._people_name = value
				Me.SendPropertyChanged("people_name")
				Me.Onpeople_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_people_ic", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property people_ic() As String
		Get
			Return Me._people_ic
		End Get
		Set
			If (String.Equals(Me._people_ic, value) = false) Then
				Me.Onpeople_icChanging(value)
				Me.SendPropertyChanging
				Me._people_ic = value
				Me.SendPropertyChanged("people_ic")
				Me.Onpeople_icChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_people_DOB", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property people_DOB() As String
		Get
			Return Me._people_DOB
		End Get
		Set
			If (String.Equals(Me._people_DOB, value) = false) Then
				Me.Onpeople_DOBChanging(value)
				Me.SendPropertyChanging
				Me._people_DOB = value
				Me.SendPropertyChanged("people_DOB")
				Me.Onpeople_DOBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_people_gender", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property people_gender() As String
		Get
			Return Me._people_gender
		End Get
		Set
			If (String.Equals(Me._people_gender, value) = false) Then
				Me.Onpeople_genderChanging(value)
				Me.SendPropertyChanging
				Me._people_gender = value
				Me.SendPropertyChanged("people_gender")
				Me.Onpeople_genderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_people_phone", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property people_phone() As String
		Get
			Return Me._people_phone
		End Get
		Set
			If (String.Equals(Me._people_phone, value) = false) Then
				Me.Onpeople_phoneChanging(value)
				Me.SendPropertyChanging
				Me._people_phone = value
				Me.SendPropertyChanged("people_phone")
				Me.Onpeople_phoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_people_email", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property people_email() As String
		Get
			Return Me._people_email
		End Get
		Set
			If (String.Equals(Me._people_email, value) = false) Then
				Me.Onpeople_emailChanging(value)
				Me.SendPropertyChanging
				Me._people_email = value
				Me.SendPropertyChanged("people_email")
				Me.Onpeople_emailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_people_address", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property people_address() As String
		Get
			Return Me._people_address
		End Get
		Set
			If (String.Equals(Me._people_address, value) = false) Then
				Me.Onpeople_addressChanging(value)
				Me.SendPropertyChanging
				Me._people_address = value
				Me.SendPropertyChanged("people_address")
				Me.Onpeople_addressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_people_role", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property people_role() As String
		Get
			Return Me._people_role
		End Get
		Set
			If (String.Equals(Me._people_role, value) = false) Then
				Me.Onpeople_roleChanging(value)
				Me.SendPropertyChanging
				Me._people_role = value
				Me.SendPropertyChanged("people_role")
				Me.Onpeople_roleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_department_name", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property department_name() As String
		Get
			Return Me._department_name
		End Get
		Set
			If (String.Equals(Me._department_name, value) = false) Then
				Me.Ondepartment_nameChanging(value)
				Me.SendPropertyChanging
				Me._department_name = value
				Me.SendPropertyChanged("department_name")
				Me.Ondepartment_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_leave_num", DbType:="Int NOT NULL")>  _
	Public Property leave_num() As Integer
		Get
			Return Me._leave_num
		End Get
		Set
			If ((Me._leave_num = value)  _
						= false) Then
				Me.Onleave_numChanging(value)
				Me.SendPropertyChanging
				Me._leave_num = value
				Me.SendPropertyChanged("leave_num")
				Me.Onleave_numChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_extra_leave", DbType:="Int NOT NULL")>  _
	Public Property extra_leave() As Integer
		Get
			Return Me._extra_leave
		End Get
		Set
			If ((Me._extra_leave = value)  _
						= false) Then
				Me.Onextra_leaveChanging(value)
				Me.SendPropertyChanging
				Me._extra_leave = value
				Me.SendPropertyChanged("extra_leave")
				Me.Onextra_leaveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hourly_rates", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property hourly_rates() As Decimal
		Get
			Return Me._hourly_rates
		End Get
		Set
			If ((Me._hourly_rates = value)  _
						= false) Then
				Me.Onhourly_ratesChanging(value)
				Me.SendPropertyChanging
				Me._hourly_rates = value
				Me.SendPropertyChanged("hourly_rates")
				Me.Onhourly_ratesChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.deduction")>  _
Partial Public Class deduction
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _deduction_id As Integer
	
	Private _deduction_type As String
	
	Private _deduction_value As Decimal
	
	Private _deduction_format As String
	
	Private _people_id As String
	
	Private _deduction_month As Integer
	
	Private _deduction_year As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondeduction_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondeduction_idChanged()
    End Sub
    Partial Private Sub Ondeduction_typeChanging(value As String)
    End Sub
    Partial Private Sub Ondeduction_typeChanged()
    End Sub
    Partial Private Sub Ondeduction_valueChanging(value As Decimal)
    End Sub
    Partial Private Sub Ondeduction_valueChanged()
    End Sub
    Partial Private Sub Ondeduction_formatChanging(value As String)
    End Sub
    Partial Private Sub Ondeduction_formatChanged()
    End Sub
    Partial Private Sub Onpeople_idChanging(value As String)
    End Sub
    Partial Private Sub Onpeople_idChanged()
    End Sub
    Partial Private Sub Ondeduction_monthChanging(value As Integer)
    End Sub
    Partial Private Sub Ondeduction_monthChanged()
    End Sub
    Partial Private Sub Ondeduction_yearChanging(value As Integer)
    End Sub
    Partial Private Sub Ondeduction_yearChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_deduction_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property deduction_id() As Integer
		Get
			Return Me._deduction_id
		End Get
		Set
			If ((Me._deduction_id = value)  _
						= false) Then
				Me.Ondeduction_idChanging(value)
				Me.SendPropertyChanging
				Me._deduction_id = value
				Me.SendPropertyChanged("deduction_id")
				Me.Ondeduction_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_deduction_type", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property deduction_type() As String
		Get
			Return Me._deduction_type
		End Get
		Set
			If (String.Equals(Me._deduction_type, value) = false) Then
				Me.Ondeduction_typeChanging(value)
				Me.SendPropertyChanging
				Me._deduction_type = value
				Me.SendPropertyChanged("deduction_type")
				Me.Ondeduction_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_deduction_value", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property deduction_value() As Decimal
		Get
			Return Me._deduction_value
		End Get
		Set
			If ((Me._deduction_value = value)  _
						= false) Then
				Me.Ondeduction_valueChanging(value)
				Me.SendPropertyChanging
				Me._deduction_value = value
				Me.SendPropertyChanged("deduction_value")
				Me.Ondeduction_valueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_deduction_format", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property deduction_format() As String
		Get
			Return Me._deduction_format
		End Get
		Set
			If (String.Equals(Me._deduction_format, value) = false) Then
				Me.Ondeduction_formatChanging(value)
				Me.SendPropertyChanging
				Me._deduction_format = value
				Me.SendPropertyChanged("deduction_format")
				Me.Ondeduction_formatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_people_id", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property people_id() As String
		Get
			Return Me._people_id
		End Get
		Set
			If (String.Equals(Me._people_id, value) = false) Then
				Me.Onpeople_idChanging(value)
				Me.SendPropertyChanging
				Me._people_id = value
				Me.SendPropertyChanged("people_id")
				Me.Onpeople_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_deduction_month", DbType:="Int NOT NULL")>  _
	Public Property deduction_month() As Integer
		Get
			Return Me._deduction_month
		End Get
		Set
			If ((Me._deduction_month = value)  _
						= false) Then
				Me.Ondeduction_monthChanging(value)
				Me.SendPropertyChanging
				Me._deduction_month = value
				Me.SendPropertyChanged("deduction_month")
				Me.Ondeduction_monthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_deduction_year", DbType:="Int NOT NULL")>  _
	Public Property deduction_year() As Integer
		Get
			Return Me._deduction_year
		End Get
		Set
			If ((Me._deduction_year = value)  _
						= false) Then
				Me.Ondeduction_yearChanging(value)
				Me.SendPropertyChanging
				Me._deduction_year = value
				Me.SendPropertyChanged("deduction_year")
				Me.Ondeduction_yearChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Leave")>  _
Partial Public Class Leave
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _leave_id As String
	
	Private _leave_date As Date
	
	Private _apply_date As Date
	
	Private _leave_duration As Integer
	
	Private _reason As String
	
	Private _people_id As String
	
	Private _leave_attempt As Integer
	
	Private _status As String
	
	Private _Reject_approve_date As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onleave_idChanging(value As String)
    End Sub
    Partial Private Sub Onleave_idChanged()
    End Sub
    Partial Private Sub Onleave_dateChanging(value As Date)
    End Sub
    Partial Private Sub Onleave_dateChanged()
    End Sub
    Partial Private Sub Onapply_dateChanging(value As Date)
    End Sub
    Partial Private Sub Onapply_dateChanged()
    End Sub
    Partial Private Sub Onleave_durationChanging(value As Integer)
    End Sub
    Partial Private Sub Onleave_durationChanged()
    End Sub
    Partial Private Sub OnreasonChanging(value As String)
    End Sub
    Partial Private Sub OnreasonChanged()
    End Sub
    Partial Private Sub Onpeople_idChanging(value As String)
    End Sub
    Partial Private Sub Onpeople_idChanged()
    End Sub
    Partial Private Sub Onleave_attemptChanging(value As Integer)
    End Sub
    Partial Private Sub Onleave_attemptChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OnReject_approve_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnReject_approve_dateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_leave_id", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property leave_id() As String
		Get
			Return Me._leave_id
		End Get
		Set
			If (String.Equals(Me._leave_id, value) = false) Then
				Me.Onleave_idChanging(value)
				Me.SendPropertyChanging
				Me._leave_id = value
				Me.SendPropertyChanged("leave_id")
				Me.Onleave_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_leave_date", DbType:="Date NOT NULL")>  _
	Public Property leave_date() As Date
		Get
			Return Me._leave_date
		End Get
		Set
			If ((Me._leave_date = value)  _
						= false) Then
				Me.Onleave_dateChanging(value)
				Me.SendPropertyChanging
				Me._leave_date = value
				Me.SendPropertyChanged("leave_date")
				Me.Onleave_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_apply_date", DbType:="Date NOT NULL")>  _
	Public Property apply_date() As Date
		Get
			Return Me._apply_date
		End Get
		Set
			If ((Me._apply_date = value)  _
						= false) Then
				Me.Onapply_dateChanging(value)
				Me.SendPropertyChanging
				Me._apply_date = value
				Me.SendPropertyChanged("apply_date")
				Me.Onapply_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_leave_duration", DbType:="Int NOT NULL")>  _
	Public Property leave_duration() As Integer
		Get
			Return Me._leave_duration
		End Get
		Set
			If ((Me._leave_duration = value)  _
						= false) Then
				Me.Onleave_durationChanging(value)
				Me.SendPropertyChanging
				Me._leave_duration = value
				Me.SendPropertyChanged("leave_duration")
				Me.Onleave_durationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reason", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property reason() As String
		Get
			Return Me._reason
		End Get
		Set
			If (String.Equals(Me._reason, value) = false) Then
				Me.OnreasonChanging(value)
				Me.SendPropertyChanging
				Me._reason = value
				Me.SendPropertyChanged("reason")
				Me.OnreasonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_people_id", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property people_id() As String
		Get
			Return Me._people_id
		End Get
		Set
			If (String.Equals(Me._people_id, value) = false) Then
				Me.Onpeople_idChanging(value)
				Me.SendPropertyChanging
				Me._people_id = value
				Me.SendPropertyChanged("people_id")
				Me.Onpeople_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_leave_attempt", DbType:="Int NOT NULL")>  _
	Public Property leave_attempt() As Integer
		Get
			Return Me._leave_attempt
		End Get
		Set
			If ((Me._leave_attempt = value)  _
						= false) Then
				Me.Onleave_attemptChanging(value)
				Me.SendPropertyChanging
				Me._leave_attempt = value
				Me.SendPropertyChanged("leave_attempt")
				Me.Onleave_attemptChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(10)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reject_approve_date", DbType:="Date")>  _
	Public Property Reject_approve_date() As System.Nullable(Of Date)
		Get
			Return Me._Reject_approve_date
		End Get
		Set
			If (Me._Reject_approve_date.Equals(value) = false) Then
				Me.OnReject_approve_dateChanging(value)
				Me.SendPropertyChanging
				Me._Reject_approve_date = value
				Me.SendPropertyChanged("Reject_approve_date")
				Me.OnReject_approve_dateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mandatory_deduction")>  _
Partial Public Class mandatory_deduction
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _deduction_id As Integer
	
	Private _deduction_type As String
	
	Private _deduction_value As System.Nullable(Of Decimal)
	
	Private _deduction_format As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondeduction_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondeduction_idChanged()
    End Sub
    Partial Private Sub Ondeduction_typeChanging(value As String)
    End Sub
    Partial Private Sub Ondeduction_typeChanged()
    End Sub
    Partial Private Sub Ondeduction_valueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Ondeduction_valueChanged()
    End Sub
    Partial Private Sub Ondeduction_formatChanging(value As String)
    End Sub
    Partial Private Sub Ondeduction_formatChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_deduction_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property deduction_id() As Integer
		Get
			Return Me._deduction_id
		End Get
		Set
			If ((Me._deduction_id = value)  _
						= false) Then
				Me.Ondeduction_idChanging(value)
				Me.SendPropertyChanging
				Me._deduction_id = value
				Me.SendPropertyChanged("deduction_id")
				Me.Ondeduction_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_deduction_type", DbType:="VarChar(20)")>  _
	Public Property deduction_type() As String
		Get
			Return Me._deduction_type
		End Get
		Set
			If (String.Equals(Me._deduction_type, value) = false) Then
				Me.Ondeduction_typeChanging(value)
				Me.SendPropertyChanging
				Me._deduction_type = value
				Me.SendPropertyChanged("deduction_type")
				Me.Ondeduction_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_deduction_value", DbType:="Decimal(18,0)")>  _
	Public Property deduction_value() As System.Nullable(Of Decimal)
		Get
			Return Me._deduction_value
		End Get
		Set
			If (Me._deduction_value.Equals(value) = false) Then
				Me.Ondeduction_valueChanging(value)
				Me.SendPropertyChanging
				Me._deduction_value = value
				Me.SendPropertyChanged("deduction_value")
				Me.Ondeduction_valueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_deduction_format", DbType:="VarChar(20)")>  _
	Public Property deduction_format() As String
		Get
			Return Me._deduction_format
		End Get
		Set
			If (String.Equals(Me._deduction_format, value) = false) Then
				Me.Ondeduction_formatChanging(value)
				Me.SendPropertyChanging
				Me._deduction_format = value
				Me.SendPropertyChanged("deduction_format")
				Me.Ondeduction_formatChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.netpay")>  _
Partial Public Class netpay
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _payroll_id As Integer
	
	Private _people_id As System.Data.Linq.Binary
	
	Private _total_attendance As System.Nullable(Of Integer)
	
	Private _total_absence As System.Nullable(Of Integer)
	
	Private _final_pay As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onpayroll_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onpayroll_idChanged()
    End Sub
    Partial Private Sub Onpeople_idChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub Onpeople_idChanged()
    End Sub
    Partial Private Sub Ontotal_attendanceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ontotal_attendanceChanged()
    End Sub
    Partial Private Sub Ontotal_absenceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ontotal_absenceChanged()
    End Sub
    Partial Private Sub Onfinal_payChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onfinal_payChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_payroll_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property payroll_id() As Integer
		Get
			Return Me._payroll_id
		End Get
		Set
			If ((Me._payroll_id = value)  _
						= false) Then
				Me.Onpayroll_idChanging(value)
				Me.SendPropertyChanging
				Me._payroll_id = value
				Me.SendPropertyChanged("payroll_id")
				Me.Onpayroll_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_people_id", DbType:="VarBinary(15)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property people_id() As System.Data.Linq.Binary
		Get
			Return Me._people_id
		End Get
		Set
			If (Object.Equals(Me._people_id, value) = false) Then
				Me.Onpeople_idChanging(value)
				Me.SendPropertyChanging
				Me._people_id = value
				Me.SendPropertyChanged("people_id")
				Me.Onpeople_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_total_attendance", DbType:="Int")>  _
	Public Property total_attendance() As System.Nullable(Of Integer)
		Get
			Return Me._total_attendance
		End Get
		Set
			If (Me._total_attendance.Equals(value) = false) Then
				Me.Ontotal_attendanceChanging(value)
				Me.SendPropertyChanging
				Me._total_attendance = value
				Me.SendPropertyChanged("total_attendance")
				Me.Ontotal_attendanceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_total_absence", DbType:="Int")>  _
	Public Property total_absence() As System.Nullable(Of Integer)
		Get
			Return Me._total_absence
		End Get
		Set
			If (Me._total_absence.Equals(value) = false) Then
				Me.Ontotal_absenceChanging(value)
				Me.SendPropertyChanging
				Me._total_absence = value
				Me.SendPropertyChanged("total_absence")
				Me.Ontotal_absenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_final_pay", DbType:="Decimal(18,0)")>  _
	Public Property final_pay() As System.Nullable(Of Decimal)
		Get
			Return Me._final_pay
		End Get
		Set
			If (Me._final_pay.Equals(value) = false) Then
				Me.Onfinal_payChanging(value)
				Me.SendPropertyChanging
				Me._final_pay = value
				Me.SendPropertyChanged("final_pay")
				Me.Onfinal_payChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.overtime")>  _
Partial Public Class overtime
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _overtime_id As Integer
	
	Private _people_id As String
	
	Private _overtime_duration As System.Nullable(Of Integer)
	
	Private _overtime_date As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onovertime_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onovertime_idChanged()
    End Sub
    Partial Private Sub Onpeople_idChanging(value As String)
    End Sub
    Partial Private Sub Onpeople_idChanged()
    End Sub
    Partial Private Sub Onovertime_durationChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onovertime_durationChanged()
    End Sub
    Partial Private Sub Onovertime_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onovertime_dateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_overtime_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property overtime_id() As Integer
		Get
			Return Me._overtime_id
		End Get
		Set
			If ((Me._overtime_id = value)  _
						= false) Then
				Me.Onovertime_idChanging(value)
				Me.SendPropertyChanging
				Me._overtime_id = value
				Me.SendPropertyChanged("overtime_id")
				Me.Onovertime_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_people_id", DbType:="VarChar(15)")>  _
	Public Property people_id() As String
		Get
			Return Me._people_id
		End Get
		Set
			If (String.Equals(Me._people_id, value) = false) Then
				Me.Onpeople_idChanging(value)
				Me.SendPropertyChanging
				Me._people_id = value
				Me.SendPropertyChanged("people_id")
				Me.Onpeople_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_overtime_duration", DbType:="Int")>  _
	Public Property overtime_duration() As System.Nullable(Of Integer)
		Get
			Return Me._overtime_duration
		End Get
		Set
			If (Me._overtime_duration.Equals(value) = false) Then
				Me.Onovertime_durationChanging(value)
				Me.SendPropertyChanging
				Me._overtime_duration = value
				Me.SendPropertyChanged("overtime_duration")
				Me.Onovertime_durationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_overtime_date", DbType:="Date")>  _
	Public Property overtime_date() As System.Nullable(Of Date)
		Get
			Return Me._overtime_date
		End Get
		Set
			If (Me._overtime_date.Equals(value) = false) Then
				Me.Onovertime_dateChanging(value)
				Me.SendPropertyChanging
				Me._overtime_date = value
				Me.SendPropertyChanged("overtime_date")
				Me.Onovertime_dateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
